module Math;

` ================================================================
` Summation Operators + - += -= ++ --
` ================================================================

function += (left:Byte, right:Const)

    { left (+)*right }
    
    return left

end

function += (left:Byte, right:Byte)

    let temp : byte(0);
    
    {
        right [ left+  temp+ right- ]
        temp  [ right+ temp-        ]
    }
    
    return left

end

function -= (left:Byte, right:Const)

    { left (-)*right }
    
    return left

end

function -= (left:Byte, right:Byte)

    let temp : byte(0);
    
    {
        right [ left-  temp+ right- ]
        temp  [ right+ temp-        ]
    }
    
    return left

end

function + (left:Byte, right:Const)

    let result : byte(left);
    result += right;

    return result

end

function + (left:Const, right:Byte)

    return right + left;
    
end

function + (left:Byte, right:Byte)

    let result : byte(left);
    result += right;

    return result

end

function - (left:Byte, right:Const)

    let result : byte(left);
    result -= right;
    
    return result

end

function - (left:Const, right:Byte)
    
    let result : byte(left);
    result -= right;
    
    return result

end

function - (left:Byte, right:Byte)

    let result : byte(left);
    result -= right;
    
    return result

end

function ++ (value:Byte)

    { value+ }

end

function -- (value:Byte)

    { value- }

end

function + (value:Byte)

    return byte(value)

end

function - (value:Byte)
    
    return 0 - value

end



` ================================================================
` Equality Operators == !=
` ================================================================

function == (left:Byte, right:Const)

    let result : byte(1);
    
    if left - right:
        --result;
    end
    
    return result
    
end

function == (left:Const, right:Byte)

    return right == left
    
end

function == (left:Byte, right:Byte)

    let result : byte(1);
    
    if left - right:
        --result;
    end
    
    return result
    
end

function != (left:Byte, right:Const)

    let result : byte(0);
    
    if left - right:
        ++result;
    end
    
    return result
    
end

function != (left:Const, right:Byte)

    return right != left
    
end

function != (left:Byte, right:Byte)

    let result : byte(0);
    
    if left - right:
        ++result;
    end
    
    return result
    
end



` ================================================================
` Logical Operators & | !
` ================================================================

function & (left:Const, right:Byte)
    
    let result : byte(0);
    
    if left:
        if right:
            ++result;
        end
    end

    return result    
    
end

function & (left:Byte, right:Const)

    return right & left

end

function & (left:Byte, right:Byte)

    let result : byte(0);
    
    if left:
        if right:
            ++result;
        end
    end

    return result
    
end

function | (left:Const, right:Byte)

    let result : byte(0);
    
    if left:
        ++result;
    elif right:
        ++result;
    end

    return result

end

function | (left:Byte, right:Const)

    return right | left

end

function | (left:Byte, right:Byte)

    let result : byte(0);
    
    if left:
        ++result;
    elif right:
        ++result;
    end

    return result
    
end

function ! (value:Byte)

    let result : byte(1);

    if value:
        --result;
    end

    return result;
    
end



` ================================================================
` Comparison Operators < <= >= >
` ================================================================

function < (left:Byte, right:Byte)

    let result : byte(0);
    let tempLeft : byte(left);
    let tempRight : byte(right);
    
    while tempLeft & tempRight:
        --tempLeft;
        --tempRight;
    end

    if tempRight:
        ++result;
    end
    
    return result
    
end

function > (left:Byte, right:Byte)
    return right < left
end

function >= (left:Byte, right:Byte)

    let result : byte(1);
    let tempLeft : byte(left);
    let tempRight : byte(right);
    
    while tempLeft & tempRight:
        --tempLeft;
        --tempRight;
    end

    if tempRight:
        --result;
    end
    
    return result
    
end

function <= (left:Byte, right:Byte)
    return right >= left
end



function < (left:Byte, right:Const)
    return left < byte(right)
end

function <= (left:Byte, right:Const)
    return left <= byte(right)
end

function >= (left:Byte, right:Const)
    return left >= byte(right)
end

function > (left:Byte, right:Const)
    return left > byte(right)
end



function < (left:Const, right:Byte)
    return byte(left) < right
end

function <= (left:Const, right:Byte)
    return byte(left) <= right
end

function >= (left:Const, right:Byte)
    return byte(left) >= right
end

function > (left:Const, right:Byte)
    return byte(left) > right
end



` ================================================================
` Min/Max
` ================================================================

function min(a:Const, b:Const)
    return (a * (a <= b)) + (b * (a > b));
end

function max(a:Const, b:Const)
    return (a * (a >= b)) + (b * (a < b));
end

function min(a:Byte, b:Byte)
    
    var result : Byte
    
    if a <= b:
        result = a;
    else:
        result = b;
    end
    
    return result;
    
end

function max(a:Byte, b:Byte)

    var result : Byte
    
    if a >= b:
        result = a;
    else:
        result = b;
    end
    
    return result;

end
