module Core;

` ================================================================
` Array Index Function
` ================================================================

selector [] (array:[Array ~T], index:Const) : ~T
    
    reference
    
        if sizeof(array) > 0:
    
            let elementSize : sizeof ~T;
            
            assert((0 <= index) & (index < array.capacity), 
                "Array index out of range.");
            
            { array ((>)*index)*elementSize }

        end
            
    end
    
    dereference
    
        if sizeof(array) > 0:
    
            let elementSize : sizeof ~T;
            
            { ((<)*index)*elementSize }
        
        end
        
    end
    
end



` ================================================================
` Memory Functions
` ================================================================

function memory_copy(source:~T, destination:~T)

    let sourceBytes : 
        cast source : [Array Byte](sizeof(source));
        
    let destBytes : 
        cast destination : [Array Byte](sizeof(destination));
        
    assert(sourceBytes.capacity == destBytes.capacity,
        "Cannot perform a memory copy on objects of different sizes.");

    iterate i : 0 while i < sourceBytes.capacity:
        
        let src : sourceBytes[i];
        let dst : destBytes[i];
        var tmp : Byte
        
        {
            dst[-] tmp[-]
            src [ dst+ tmp+ src- ]
            tmp [ src+ tmp-    ]
        }
        
    next i + 1;

end

function memory_copy(object:~T)

    let source : object;
    var destination : ~T;
    
    memory_copy(source, destination);

    return destination;

end

function memory_reset(object:~T, value:Const)

    let size : sizeof(object);

    let bytes :
        cast object : [Array Byte](size);

    if size > 0:
        
        {
            bytes 
            ( # value > )*size 
            ( < )*size
        }
    
    end
    
end



` ================================================================
` Core Byte Functions
` ================================================================

function byte(value:Const)

    var byte : Byte
    { byte # value }
    
    return byte

end

function byte(value:Byte)

    return memory_copy(value)

end

function = (left:Byte, right:Const)

    { left # right }
    return left
    
end

function = (left:Byte, right:Byte)

    memory_copy(right, left);
    return left
    
end



` ================================================================
` Error Functions
` ================================================================

function assert(condition:Const)

    assert(condition, "");
    
end

function error(message:String)

    let notice : "Program Error: ";
    
    { 
        notice  >[.>]<[<]
        message >[.>]<[<]
        _NULL_[-]+[]
    }

end
