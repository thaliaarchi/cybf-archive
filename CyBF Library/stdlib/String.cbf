module String(Math);

` ================================================================
` Struct Definitions
` ================================================================

struct BChar
    ordinal : Byte
end

struct BString(maxLength)

    header : BChar
    characters : [Array BChar](maxLength)
    footer : BChar
    
    max_length : Const(maxLength)
    
    function init(this)
        
        this.header.ordinal = 0;
        this.footer.ordinal = 0;
        
        return this;
        
    end
    
    function length(this)
    
        let count : byte(0);
        let stillCounting : byte(1);
    
        iterate i : 0 while i < this.characters.capacity:

            if this.characters[i].ordinal:
            
                if stillCounting:
                
                    ++count;
                
                end
            
            else:
                
                stillCounting = 0;
            
            end
        
        next i + 1;
        
        return count;
    
    end
    
end


` ================================================================
` Struct Constructors
` ================================================================

function bchar(chr:Character)
    
    return cast byte(chr.ordinal) : BChar
    
end

function bstring(str:String)

    var bytes : [Array Byte](str.size);
    { bytes # str }
        
    return cast bytes : BString(str.length)

end



` ================================================================
` Basic print functions.
` ================================================================

function println()
    print(bchar('\n'));
end



function print(value:Const)
    print(string(value));
end

function println(value:Const)
    print(value);
    println();
end



function print(chr:Character)
    let bchr : bchar(chr);
    print(bchr);
end

function println(chr:Character)
    print(chr);
    println();
end



function print(bchr:BChar)
    { bchr. }
end

function println(bchr:BChar)
    print(bchr);
    println();
end



function print(str:String)
    { str >[.>]<[<] }
end

function println(str:String)
    print(str);
    println();
end



function print(bstr:BString)
    { bstr >[.>]<[<] }
end

function println(bstr:BString)
    print(bstr);
    println();
end



` ================================================================
` Converting numeric types into decimal digit strings.
` ================================================================

function bstring(value:Const)
    return bstring(string(value));
end

function bstring(value:Byte)

    let result : (new BString(3)).init();
    
    let b0 : result.characters[0].ordinal;
    let b1 : result.characters[1].ordinal;
    let b2 : result.characters[2].ordinal;
    
    b0 = 0;
    b1 = 0;
    b2 = value;
    
    while b2 >= 100:
        b0 += 1;
        b2 -= 100;
    end
    
    while b2 >= 10:
        b1 += 1;
        b2 -= 10;
    end

    if b0:
    
        b0 += '0'.ordinal;
        b1 += '0'.ordinal;
    
    elif b1:
    
        b0 += ' '.ordinal;
        b1 += '0'.ordinal;
    
    else:
    
        b0 += ' '.ordinal;
        b1 += ' '.ordinal;
    
    end
    
    b2 += '0'.ordinal;
    
    return result;
    
end

function print(b:Byte)
    
    let bstr : bstring(b);
    
    if bstr[0] != ' ':
        print(bstr[0]);
        print(bstr[1]);
        print(bstr[2]);
        
    elif bstr[1] != ' ':
        print(bstr[1]);
        print(bstr[2]);

    else:
        print(bstr[2]);
        
    end
    
end

function println(b:Byte)
    print(b);
    println();
end



` ================================================================
` Operators
` ================================================================

function [] (bstr:BString, index:Const)
    return bstr.characters[index];
end



function = (left:BChar, right:Character)
    left.ordinal = right.ordinal;
end

function = (left:BChar, right:BChar)
    left.ordinal = right.ordinal;
end



function == (left:Character, right:Character)
    return left.ordinal == right.ordinal;
end

function == (left:Character, right:BChar)
    return left.ordinal == right.ordinal;
end

function == (left:BChar, right:Character)
    return left.ordinal == right.ordinal;
end

function == (left:BChar, right:BChar)
    return left.ordinal == right.ordinal;
end



function != (left:Character, right:Character)
    return left.ordinal != right.ordinal;
end

function != (left:Character, right:BChar)
    return left.ordinal != right.ordinal;
end

function != (left:BChar, right:Character)
    return left.ordinal != right.ordinal;
end

function != (left:BChar, right:BChar)
    return left.ordinal != right.ordinal;
end



` ================================================================
` Input Functions
` ================================================================

function readchar()

    var c : BChar
    { c, }

    return c
    
end

function readline(buffer:[List BChar])

    buffer.clear();
    let advance : ++buffer;
    
    while advance:
    
        let input : readchar();
        *buffer = input;
        
        if input == '\0':
            
            --advance;
        
        elif input == '\n':
            
            --advance;
            
            if ++buffer:
                *buffer = '\0';
            end
            
        else:
        
            advance = ++buffer;
        
        end
    
    end
    
end
