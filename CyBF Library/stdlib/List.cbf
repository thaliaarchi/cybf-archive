module List;

` ================================================================
` List Data Structure
`
` Description:
`
`                       Initial Memory Layout
`                               
`                       Header  Begin   0   1   2 ...   N   Footer
` Boundary Element      0       1       1   1   1       1   0
` Stack Element         0       0       1   1   1       1   0
` Enumerator Elements                   
`   Element[0]          0       0       1   1   1       1   1
`   Element[1]          0       0       1   1   1       1   1
`   ...                 ...             
`   Element[M]          0       0       1   1   1       1   1
` Content               X       X       X   X   X       X   X
`
`
` ================================================================


struct [ListItem ~T](enumerators)

    boundary_element : Byte
    stack_element : Byte
    enumerator_elements : [Array Byte](enumerators)
    content : ~T
    
    total_enumerators : Const(enumerators)
    
    selector next_item(this:~I) : ~I
    
        reference
        
            let itemSize : sizeof(this);
            { (>)*itemSize }
            
        end
        
        dereference
        
            let itemSize : sizeof(this);
            { (<)*itemSize }
            
        end
        
    end
    
    selector previous_item(this:~I) : ~I
    
        reference
        
            let itemSize : sizeof(this);
            { (<)*itemSize }
            
        end
        
        dereference
        
            let itemSize : sizeof(this);
            { (>)*itemSize }
            
        end
    
    end
    
end

struct [List ~T](capacity, enumerators)

    header : [ListItem ~T](enumerators)
    begin : [ListItem ~T](enumerators)
    items : [Array [ListItem ~T](enumerators)](capacity)
    footer : [ListItem ~T](enumerators)
    
    capacity : Const(capacity)
    total_enumerators : Const(enumerators)

    function init(this)
        
        this.header.boundary_element = 0;
        this.header.stack_element = 0;
        memory_reset(this.header.enumerator_elements, 0);

        this.begin.boundary_element = 1;
        this.begin.stack_element = 0;
        memory_reset(this.begin.enumerator_elements, 0);
        
        iterate i : 0 while i < this.capacity:
            this.items[i].boundary_element = 1;
            this.items[i].stack_element = 1;
            memory_reset(this.items[i].enumerator_elements, 1);
        next i + 1;

        this.footer.boundary_element = 0;
        this.footer.stack_element = 0;
        memory_reset(this.footer.enumerator_elements, 1);
    
        return this;
    
    end

    selector current_item(this:[List ~T]) 
        : [ListItem ~T](this.total_enumerators)
        
        reference

            let itemSize : sizeof(this.header);
            
            {
                >                   ` Move to the stack_element of the header.
                (>)*itemSize        ` Move to the stack_element of the begin item.
                [ (>)*itemSize ]    ` Scan for the list item with a marked stack_element.
                <                   ` Move to the start of the selected list item
            }
        
        end
        
        dereference
        
            let itemSize : sizeof(this.header);
            
            {
                >                   ` Move to the stack_element of the selected list item.
                (<)*itemSize        ` Move to the corresponding element of the prior item.
                                    `   This will only be marked if it's the header.
                [ (<)*itemSize ]    ` Scan for the stack_element of the header.
                <                   ` Move to the start of the header item.
            }
        
        end
        
    end

    function push(this)
    
        let success : byte(0);
        let currentItem : this.current_item();
        let nextItem : currentItem.next_item();
        let itemSize : sizeof(currentItem);
        
        if nextItem.boundary_element:
        
            {
                currentItem
                > +                 ` Unmark the stack_element of the current item.
                (>)*itemSize -      ` Mark the stack_element of the next item.
                <                   ` Move to the start of the "next" (now current) item.
            }
        
            ++success;
        
        end
        
        return success;
    
    end
    
    function append(this, content)  ` Don't specify content data type here. Make use of
                                    ` the overloaded '=' to copy the data appropriately.
        let success : byte(0);
    
        if this.push():
            this.current_item().content = content;
            ++success;
        end
    
        return success;
    
    end
    
    function extend(this:[List ~T], content:Tuple)
    
        let success : byte(1);
    
        iterate i : 0 while i < content.size:
        
            success = success & this.append(content[i]);
        
        next i + 1;
    
        return success;
    
    end
    
    function pop(this)
    
        let success : byte(0);
        let currentItem : this.current_item();
        let previousItem : currentItem.previous_item();
        let itemSize : sizeof(currentItem);
        
        if previousItem.boundary_element:
        
            {
                currentItem 
                > +                 ` Unmark the stack_element of the current item.
                (<)*itemSize -      ` Mark the stack_element of the previous item.
                <                   ` Move to the start of the "previous" (now current) item.
            }
        
            ++success;
        
        end
    
        return success;
    
    end
    
    function pop(this:[List ~T], content:~T)
    
        content = this.current_item().content;
        return this.pop();
    
    end
    
    function clear(this)

        let currentItem : this.current_item();
        let itemSize : sizeof(currentItem);
        
        {
            currentItem
            > +                     ` Unmark the stack_element of the current item.
            (<)*itemSize            ` Move to the stack_element of the prior item.
            [ (<)*itemSize ]        ` Scan for the stack_element of the header.
            (>)*itemSize            ` Move to the stack_element of the begin item.
            -                       ` Mark the begin item as current.
            <                       ` Move to the start of the now current item.
        }
    
    end
    
    function get_enumerator(this:~L, index:Const)
    
        assert((0 <= index) & (index < this.total_enumerators),
            "Enumerator index out of range.");
    
        return cast this : [Enumerator ~L](index);
    
    end
    
end

struct [Enumerator ~L:[List ~T]](index)
    
    list : ~L
    index : Const(index)

    selector current_item(this:[Enumerator [List ~T]]) 
        : [ListItem ~T](this.list.total_enumerators)
        
        reference
        
            let itemSize : sizeof(this.list.header);
            let index : this.index;
        
            {
                >>(>)*index         ` Move to the indexed enumerator_element of the header item.
                (>)*itemSize        ` Move to the corresponding enumerator_element of the begin item.
                [(>)*itemSize]      ` Scan for the list item marked by this enumerator.
                (<)*index <<        ` Move to the beginning of the selected list item.    
            }
        
        end
        
        dereference
        
            let itemSize : sizeof(this.list.header);            
            let index : this.index;        
        
            {
                >>(>)*index         ` Move to the indexed enumerator_element of the current item.
                (<)*itemSize        ` Move to the corresponding element of the prior item.
                                    `   This will only be marked if it's the header.
                [(<)*itemSize]      ` Scan for the indexed enumerator_element of the header item.
                (<)*index <<        ` Move to the start of the header item.    
            }               
        
        end
        
    end

    function move_next(this)
    
        let success : byte(0);
        let currentItem : this.current_item();
        let itemSize : sizeof(currentItem);
        let index : this.index;
        
        if currentItem.stack_element:
        
            {
                currentItem
                >>(>)*index +       ` Unmark the indexed enumerator_element of the current list item.
                (>)*itemSize -      ` Mark the corresponding element of the next list item.
                (<)*index <<        ` Move to the start of the newly selected list item.
            }
        
            ++success;
        
        end
        
        return success;
    
    end    
    
    function move_previous(this)
    
        let success : byte(0);
        let currentItem : this.current_item();
        let previousItem : currentItem.previous_item();
        let itemSize : sizeof(currentItem);
        let index : this.index;
        
        if previousItem.boundary_element:
        
            {
                currentItem
                >>(>)*index +       ` Unmark the indexed enumerator_element of the current list item.
                (<)*itemSize -      ` Mark the corresponding element of the next list item.
                (<)*index <<        ` Move to the start of the newly selected list item.
            }
        
            ++success;
        
        end
        
        return success;
    
    end
    
    function reset(this)
    
        let currentItem : this.current_item();
        let itemSize : sizeof(currentItem);
        let index : this.index;
        
        {
            currentItem
            >>(>)*index +           ` Unmark the indexed enumerator_element of the current list item.
            (<)*itemSize            ` Move to the indexed enumerator_element of the prior item.
            [(<)*itemSize]          ` Scan for the indexed enumerator_element of the header item.
            (>)*itemSize            ` Move to the indexed enumerator_element of the begin item.
            -                       ` Mark this element as the new 'current'.
            (<)*index <<            ` Move to the start of the now current item.
        }
    
    end
    
    function contains(this, content)    ` The overloaded equality operator will force content
                                        ` to be the correct data type.
        let searching : byte(1);
        
        this.reset();
        
        while this.move_next() & searching:
            searching = (this.current_item().content != content);
        end
        
        return !searching;
        
    end
    
end



function # (list:[List ~T], index:Const)
    return list.get_enumerator(index);
end

function ++ (list:[List ~T])
    return list.push();
end

function -- (list:[List ~T])
    return list.pop();
end

function * (list:[List ~T])
    return list.current_item().content;
end



function ++ (enum:[Enumerator ~L])
    return enum.move_next();
end

function -- (enum:[Enumerator ~L])
    return enum.move_previous();
end

function * (enum:[Enumerator ~L])
    return enum.current_item().content;
end
